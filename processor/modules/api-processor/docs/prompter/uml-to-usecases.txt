仔细分析下面模型，从用户视角来编写需求用例。要求：

1. 返回的内容中不出现：token、调用、Service、ID、代码等技术词汇。
2. 从业务人员的视角分析，从用户的角度编写
3. 只返回 markdown 表格，不返回无关的内容
4. 扩展场景里需要考虑失败等情况
5. 你返回的格式如下所示：

###
```markdown
| 用例名称 | 前置条件 | 后置条件 | 主成功场景 | 扩展场景 |
| --- | --- | --- | --- | --- |
```
###

###
@startuml
' PaymentRequest (付款请求)
class PaymentRequest {
    -token: string
    -amount: integer
    -description: string
    -createdDateTime: string
    -status: string
    +getPayments(pageNumber: integer, pageSize: integer, fromDateTime: string, toDateTime: string, includeRefunds: boolean): PaymentList
    +getPayment(paymentToken: string): Payment
}
' Payment (付款)
class Payment {
    -token: string
    -tikkieId: string
    -counterPartyName: string
    -counterPartyAccountNumber: string
    -amountInCents: integer
    -description: string
    -createdDateTime: string
    -refunds: array
}
' PaymentList (付款列表)
class PaymentList {
    -payments: array
    -totalElementCount: integer
}
' PaymentService (付款服务)
class PaymentService {
    -appToken: string
    +getPayments(paymentRequestToken: string, pageNumber: integer, pageSize: integer, fromDateTime: string, toDateTime: string, includeRefunds: boolean): PaymentList
    +getPayment(paymentRequestToken: string, paymentToken: string): Payment
}
PaymentRequest -> Payment : 包含多个 Payment
PaymentRequest -> PaymentList : 组成 PaymentList
PaymentList <|-- Payment : 由多个 Payment 组成
PaymentService -> PaymentRequest : 根据 PaymentRequestToken 获取 PaymentList 和 Payment
@enduml
###

